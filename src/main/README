
  README for FreeLing sample main programs and scripts
  ----------------------------------------------------

  This directoy contains two main programs provided with FreeLing as samples 
 of library usage, and two scripts used to call these programs under different
 assumptions

 --------
 PROGRAMS
 --------

 **** ANALYZER.CC ****

  The first, "analyzer.cc" is an exhaustive main program that allows the 
 user to control all parameters and configuration files provided to the 
 library, and to choose different kinds of I/O formats.
  This program is provided as a sample, as well as a main program to access
 the analisys library for those who just want a ready-to-use analyzer.
  The used options are controlled via configuration file, or via command-line options.

  See user manual for details on the available options


 **** SAMPLE.CC ****

  The second program, "sample.cc", is provided as an example of how application 
  could use the services in FreeLing library.  In this case, the application would
  read a sentence, call FreeLing to get morphological analysis, PoS tagging, chunking,
  and dependency parsing.  Then, it processes the results at will (the sample just 
  prints them in a different formats, but a real application could do any other thing)

  You can use sample.cc as a starting point to build your customized calls to the
  library, getting rid of the annoying option management. 

  To compile sample.cc, do:

   g++ -o sample sample.cc -ldb_cxx -lmorfo -lfries -lomlet -lpcre

  You may have to add -I and -L options with the right location of the berkeley DB
  libraries and headers. Also, you may have to add the paths where you installed 
  Omlet+Fries and FreeLing libraries.

  To execute the sample program, cd to the directory where the data files are located
  (e.g. /usr/local/share/FreeLing/es), call the program, and write some simple sentences
  in the terminal.

  Have a look to sample.cc to understand what it is doing.


 -------
 SCRIPTS
 -------

 **** ANALYZE.UTF ****

 This script just calls analyzer.cc, and so, it accepts the same command
 line options.

 The only differences are:

 1.- The -f option (configuration file) does not need to be the full path 
    of an existing file. If the file is not found, it is searched in 
    share/FreeLing/config under FreeLing installation directory.

 2.- The input is assumed to be in UTF-8, and so the 'uniconv' utility is
    used to convert it before calling the analyzer. The analyzer output 
    is also converted back to UTF-8.


 **** ANALYZE.SERVER ****

 This script just calls analyzer.cc, and so, it accepts the same command
 line options.

 The only differences are:

 1.- The -f option (configuration file) does not need to be the full path 
    of an existing file. If the file is not found, it is searched in 
    share/FreeLing/config under FreeLing installation directory.

 2.- The script expects the first argument to be a basename with which 
    two named pipes (basename.in and basename.out) are created.
     The analyzer is launched to read from basename.in and write
    to basename.out

     This provides simple but efficient way to call the analyzer from
    other programs without having to link the library, and without 
    having to launch and load the analyzer for each file to be processed.
